@page "/write/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@using ItemInsight.Shared.Domain

<h3 class="card-title">ItemInsight Review</h3>
<a href="/write/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    create new review
</a>
<br />
<br />

@code {
    private List<Review>? Reviews;
    private List<Product>? Products;

    protected async override Task OnInitializedAsync()
    {
        Reviews = await _client.GetFromJsonAsync<List<Review>>($"{Endpoints.ReviewsEndpoint}");
        Products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");

    }

    async Task Delete(int reviewId)
    {
        if (Reviews != null)
        {
            var review = Reviews.First(q => q.Id == reviewId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {review.ConsumerReview}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.ReviewsEndpoint}/{reviewId}");
                await OnInitializedAsync();
            }
        }
    }
}
@if (Reviews == null)
{
    <div class="alert alert-info">Loading Reviews...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Product</th>
                <th>Review</th>
                <th>Rating</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var review in Reviews)
            {
                var ImageProduct = Products.FirstOrDefault(p => p.Id == review.ProductId);

                <tr>
                    <td><img src="@ImageProduct.ProductImage" alt="Uploaded Image" style="max-width:180px; max-height:180px;" /></td>
                    <td>@review.ConsumerReview</td>
                    <td>@review.Rating</td>
                </tr>
            }
        </tbody>
    </table>
}
