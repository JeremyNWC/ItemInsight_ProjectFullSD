@page "/reviews/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@using ItemInsight.Shared.Domain
@inject HttpInterceptorService _interceptor
@implements IDisposable

<head>
    <style>
        body {
            background: linear-gradient(to bottom right, #FF6F61, #FDBB2D, #8B78E6);
        }

        table {
            color: black; /* Set text color for all table content to black */
        }

        th, td {
            color: black; /* Set text color for table headers and cells to black */
            border: 1px solid black; /* Optional: Add border for better visibility */
        }
    </style>
</head>

<h3 class="card-title"><b>ItemInsight Review</b></h3>

<input type="text" @bind-value="searchTerm" @bind-value:event="oninput" placeholder="Search by product name" class="form-control mb-3" />

<a href="/reviews/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    create new review
</a>
<br />
<br />

@code {
    private List<Review>? Reviews;
    private List<Product>? Products;
    private string searchTerm;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Reviews = await _client.GetFromJsonAsync<List<Review>>($"{Endpoints.ReviewsEndpoint}");
        Products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");

    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }

    async Task Delete(int reviewId)
    {
        if (Reviews != null)
        {
            var review = Reviews.First(q => q.Id == reviewId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {review.ConsumerReview}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.ReviewsEndpoint}/{reviewId}");
                await OnInitializedAsync();
            }
        }
    }
}
@if (Reviews == null)
{
    <div class="alert alert-info">Loading Reviews...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th><b>Product</b></th>
                <th><b>Image</b></th>
                <th><b>Review</b></th>
                <th><b>Rating</b></th>
                <th><b>Actions</b></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var review in Reviews.Where(r => string.IsNullOrEmpty(searchTerm) || Products.Any(p => p.Id == r.ProductId && p.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))))
            {
                var ImageProduct = Products.FirstOrDefault(p => p.Id == review.ProductId);

                <tr>
                    <td><b>@ImageProduct.Name</b></td>
                    <td><img src="@ImageProduct.ProductImage"alt="Uploaded Image" style="max-width:180px; max-height:180px;" /></td>
                    <td><b>@review.ConsumerReview</b></td>
                    <td><b>@review.Rating</b></td>
                    <td>
                        <a href="/reviews/view/@review.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/reviews/edit/@review.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(review.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
