@page "/staffs/"

@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@using ItemInsight.Shared.Domain;

<h3 class="card-title">Staffs</h3>

<a href="/staffs/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Staff
</a>
<br />
<br />

@if (Staffs == null)
{
    <div class="alert alert-info">Loading Staffs..</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>Contact</th>
                <th>Email</th>
                <th>Password</th>
                <th>Actions</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var staff in Staffs)
            {
                <tr>
                    <td>@staff.Name</td>
                    <td>@staff.ContactNo</td>
                    <td>@staff.Email</td>
                    <td>@staff.Password</td>

                    <td>
                        <a href="/staffs/view/@staff.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/staffs/edit/@staff.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="(() => Delete(staff.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    private List<Staff>? Staffs;

    protected async override Task OnInitializedAsync()

    {
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");
    }

    async Task Delete(int staffId)
    {
        if (Staffs != null)
        {
            var staff = Staffs.FirstOrDefault(q => q.Id == staffId);
            if (staff != null)
            {
                var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {staff.Name}?");
                if (confirm)
                {
                    try
                    {
                        var response = await _client.DeleteAsync($"{Endpoints.StaffsEndpoint}/{staffId}");
                        if (response.IsSuccessStatusCode)
                        {
                            Staffs.Remove(staff);
                            StateHasChanged(); // To refresh the UI
                        }
                        else
                        {
                            // Handle the error, maybe show a message to the user
                            var error = await response.Content.ReadAsStringAsync();
                            Console.WriteLine(error);
                        }
                    }
                    catch (Exception ex)
                    {
                        // Log or handle the exception
                        Console.WriteLine(ex.Message);
                    }
                }
            }
        }
    }


}
